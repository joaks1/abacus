/**
 * @file        partition_combinatorics.h
 * @authors     Jamie Oaks
 * @package     msBayes
 * @brief       A collection of functions for partition combinatorics.
 * @copyright   Copyright (C) 2013 Jamie Oaks.
 *   This file is part of msBayes.  msBayes is free software; you can
 *   redistribute it and/or modify it under the terms of the GNU General Public
 *   License as published by the Free Software Foundation; either version 2 of
 *   the License, or (at your option) any later version.
 * 
 *   msBayes is distributed in the hope that it will be useful, but WITHOUT ANY
 *   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 *   details.
 * 
 *   You should have received a copy of the GNU General Public License along
 *   with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef PARTITION_COMBINATORICS_H
#define PARTITION_COMBINATORICS_H

#include <gsl/gsl_rng.h>
#include "array_utils.h"

int integer_partition_cumulative_spectrum(int n, i_array * spectrum_dest);
int integer_partition_spectrum(int n, i_array * spectrum_dest);
double integer_partition_cumulative_probs(int n, d_array * probs);
double integer_partition_probs(int n, d_array * probs);
int integer_partition(int n);
int draw_integer_partition_category(const gsl_rng * rng, int n);

/** 
 * A function for generating a random draw from a Dirichlet process.
 *
 * The function will generate one random mapping of `n` elements to subset
 * indices via a Dirichlet process.
 *
 * @param rng
 *   A Gnu Scientific Library (http://www.gnu.org/software/gsl/) instance of a
 *   random number generator (for compatibility with the msBayes package).
 * @param n
 *   The number of elements.
 * @param alpha
 *   The concentration parameter of the Dirichlet process.
 * @param elements
 *   An array of length n in which to store the subset indices generated by the
 *   process.
 */
int dirichlet_process_draw(const gsl_rng * rng, int n, double alpha,
        i_array * elements);

/** 
 * A function for generating all partitions of an integer.
 *
 * This function generates all of the integer partitions of an integer in
 * anti-lexicographic order. The code is based on Algorithm ZS1 from:
 *
 * Zoghbi, A., and I. Stojmenovic. 1998. Fast algorithms for generating
 *     generating integer partitions. Intern. J. Computer Math.
 *     70:319--332.
 *
 * @param n
 *   The integer to partition.
 * @param ip
 *   The integer partition of n, or the total number of was to partition n when
 *   order is irrelevant.
 *   @see integer_partition()
 * @param partitions
 *   A 2-dimensional array (ip x n) where the generated partitions will be
 *   stored.
 */ 
void generate_integer_partitions(int n, int ip, int **partitions);

#endif /* PARTITION_COMBINATORICS_H */

